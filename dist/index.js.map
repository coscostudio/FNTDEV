{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "function initSplide(selector: string, options: any, useAutoScroll = false) {\n  // Query all matching elements instead of just one\n  const splideElements = document.querySelectorAll(selector);\n  if (!splideElements.length) return;\n\n  // Initialize each instance\n  splideElements.forEach((element, index) => {\n    const uniqueId = `${selector.replace('.', '')}-${index}`;\n    element.setAttribute('id', uniqueId);\n\n    const splide = new Splide(element, {\n      ...options,\n    });\n\n    // Enable clicking on slides to navigate\n    splide.on('mounted', () => {\n      splide.Components.Elements.slides.forEach((slide: HTMLElement, slideIndex: number) => {\n        slide.addEventListener('click', () => {\n          splide.go(slideIndex);\n        });\n      });\n    });\n\n    // Mount Splide with Autoscroll extension only if needed\n    if (useAutoScroll && window.splide?.Extensions) {\n      splide.mount(window.splide.Extensions);\n    } else {\n      splide.mount();\n    }\n  });\n}\n\n// Sliders Initialization\ndocument.addEventListener('DOMContentLoaded', () => {\n  const splideConfigs = [\n    {\n      selector: '.slider1',\n      options: {\n        type: 'loop',\n        autoWidth: true,\n        gap: '4rem',\n        drag: 'free',\n        focus: 'left',\n        arrows: false,\n        pagination: false,\n        keyboard: false,\n        autoScroll: {\n          autoStart: true,\n          speed: 0.5,\n          pauseOnHover: false,\n        },\n      },\n      useAutoScroll: true,\n    },\n    {\n      selector: '.slider-fnt',\n      options: {\n        type: 'loop',\n        autoWidth: true,\n        gap: '1rem',\n        drag: 'free',\n        focus: 'left',\n        arrows: false,\n        pagination: false,\n        keyboard: false,\n        autoScroll: {\n          autoStart: true,\n          speed: 0.75,\n          pauseOnHover: false,\n        },\n      },\n      useAutoScroll: true,\n    },\n    {\n      selector: '.product-slider',\n      options: {\n        autoWidth: true,\n        perMove: 1,\n        gap: '1rem',\n        arrows: true,\n        pagination: false,\n        drag: true,\n        type: 'slide',\n        focus: 'left',\n        snap: true,\n      },\n      useAutoScroll: false,\n    },\n  ];\n\n  splideConfigs.forEach((config) => {\n    initSplide(config.selector, config.options, config.useAutoScroll);\n  });\n});\n"],
  "mappings": ";;;AAAA,MAAI,YAAY,GAAG,uBAAY,UAAU,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACA7F,WAAS,WAAW,UAAkB,SAAc,gBAAgB,OAAO;AAEzE,UAAM,iBAAiB,SAAS,iBAAiB,QAAQ;AACzD,QAAI,CAAC,eAAe;AAAQ;AAG5B,mBAAe,QAAQ,CAAC,SAAS,UAAU;AACzC,YAAM,WAAW,GAAG,SAAS,QAAQ,KAAK,EAAE,CAAC,IAAI,KAAK;AACtD,cAAQ,aAAa,MAAM,QAAQ;AAEnC,YAAM,SAAS,IAAI,OAAO,SAAS;AAAA,QACjC,GAAG;AAAA,MACL,CAAC;AAGD,aAAO,GAAG,WAAW,MAAM;AACzB,eAAO,WAAW,SAAS,OAAO,QAAQ,CAAC,OAAoB,eAAuB;AACpF,gBAAM,iBAAiB,SAAS,MAAM;AACpC,mBAAO,GAAG,UAAU;AAAA,UACtB,CAAC;AAAA,QACH,CAAC;AAAA,MACH,CAAC;AAGD,UAAI,iBAAiB,OAAO,QAAQ,YAAY;AAC9C,eAAO,MAAM,OAAO,OAAO,UAAU;AAAA,MACvC,OAAO;AACL,eAAO,MAAM;AAAA,MACf;AAAA,IACF,CAAC;AAAA,EACH;AAGA,WAAS,iBAAiB,oBAAoB,MAAM;AAClD,UAAM,gBAAgB;AAAA,MACpB;AAAA,QACE,UAAU;AAAA,QACV,SAAS;AAAA,UACP,MAAM;AAAA,UACN,WAAW;AAAA,UACX,KAAK;AAAA,UACL,MAAM;AAAA,UACN,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,YAAY;AAAA,UACZ,UAAU;AAAA,UACV,YAAY;AAAA,YACV,WAAW;AAAA,YACX,OAAO;AAAA,YACP,cAAc;AAAA,UAChB;AAAA,QACF;AAAA,QACA,eAAe;AAAA,MACjB;AAAA,MACA;AAAA,QACE,UAAU;AAAA,QACV,SAAS;AAAA,UACP,MAAM;AAAA,UACN,WAAW;AAAA,UACX,KAAK;AAAA,UACL,MAAM;AAAA,UACN,OAAO;AAAA,UACP,QAAQ;AAAA,UACR,YAAY;AAAA,UACZ,UAAU;AAAA,UACV,YAAY;AAAA,YACV,WAAW;AAAA,YACX,OAAO;AAAA,YACP,cAAc;AAAA,UAChB;AAAA,QACF;AAAA,QACA,eAAe;AAAA,MACjB;AAAA,MACA;AAAA,QACE,UAAU;AAAA,QACV,SAAS;AAAA,UACP,WAAW;AAAA,UACX,SAAS;AAAA,UACT,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,YAAY;AAAA,UACZ,MAAM;AAAA,UACN,MAAM;AAAA,UACN,OAAO;AAAA,UACP,MAAM;AAAA,QACR;AAAA,QACA,eAAe;AAAA,MACjB;AAAA,IACF;AAEA,kBAAc,QAAQ,CAAC,WAAW;AAChC,iBAAW,OAAO,UAAU,OAAO,SAAS,OAAO,aAAa;AAAA,IAClE,CAAC;AAAA,EACH,CAAC;",
  "names": []
}
